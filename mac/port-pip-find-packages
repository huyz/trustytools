#!/bin/bash

##############################################################################
# Script-wide block: this may allow updating the script as it's running (if under 8KB)
{

# When debugging
#set -x

#### Preamble (v2023-11-03)

# Requires root
#[ "${EUID:-$UID}" -eq 0 ] || exec sudo -p '[sudo] password for %u: ' -H "$BASH" "$0" "$@"
#[ "${EUID:-$UID}" -eq 0 ] || { echo "${BASH_SOURCE[0]}: Error: must be run as root" >&2; exit 1; }

# Check for bash 4 for `readarray`
#[ "${BASH_VERSINFO:-0}" -ge 4 ] || { echo "${BASH_SOURCE[0]}: Error: bash v4+ required." >&2; exit 1; }

set -euo pipefail
shopt -s failglob
# shellcheck disable=SC2317
function trap_err { echo "ERR signal on line $(caller)" >&2; }
trap trap_err ERR
trap exit INT
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

if [[ $OSTYPE == darwin* ]]; then
    if [[ "${EUID:-$UID}" -eq 0 ]]; then
        MAC_PREFIX=/opt/local
        [ -x "${REALPATH:="$MAC_PREFIX/bin/grealpath"}" ] || \
            { echo "$0: Error: \`sudo port install coreutils\` to install $REALPATH." >&2; exit 1; }
        [ -x "${GETOPT:=/opt/local/bin/getopt}" ] || \
            { echo "$0: Error: \`sudo port install util-linux\` to install $GETOPT." >&2; exit 1; }
#        [ -x "${SED:=/opt/local/bin/gsed}" ] || \
#            { echo "$0: Error: \`sudo port install gsed\` to install $SED." >&2; exit 1; }
#        [ -x "${FD:=/opt/local/bin/fd}" ] || \
#            { echo "$0: Error: \`sudo port install fd\` to install $FD." >&2; exit 1; }
    else
        HOMEBREW_PREFIX="$( (/opt/homebrew/bin/brew --prefix || /usr/local/bin/brew --prefix || brew --prefix) 2>/dev/null)"
        MAC_PREFIX="$HOMEBREW_PREFIX"
        [ -x "${REALPATH:="$MAC_PREFIX/bin/grealpath"}" ] || \
            { echo "$0: Error: \`brew install coreutils\` to install $REALPATH." >&2; exit 1; }
        [ -x "${GETOPT:="$MAC_PREFIX/opt/gnu-getopt/bin/getopt"}" ] || \
            { echo "$0: Error: \`brew install gnu-getopt\` to install $GETOPT." >&2; exit 1; }
#        [ -x "${SED:="$MAC_PREFIX/bin/gsed"}" ] || \
#            { echo "$0: Error: \`brew install gnu-sed\` to install $SED." >&2; exit 1; }
#        [ -x "${FD:="$MAC_PREFIX/bin/fd"}" ] || \
#            { echo "$0: Error: \`brew install fd\` to install $FD." >&2; exit 1; }
    fi
#	READLINK="greadlink" # coreutils
#	DATE="gdate"  		# coreutils
#	STAT="gstat"  		# coreutils
#	TIMEOUT="gtimeout"  # coreutils
else
    HOMEBREW_PREFIX="$( (/home/linuxbrew/.linuxbrew/bin/brew --prefix || brew --prefix) 2>/dev/null)"
    REALPATH="realpath"
#    READLINK="readlink"
#    DATE="date"
#    STAT="stat"
#    TIMEOUT="timeout"
    GETOPT="getopt"
#    SED="sed"
#    FD="fdfind"
fi

SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
# a) Uncomment to expand symlinks in order to find the proper .envrc for direnv
#SCRIPT="$($REALPATH "${BASH_SOURCE[0]}")"
# b) Uncomment in the general case
#SCRIPT="$($REALPATH --no-symlinks "${BASH_SOURCE[0]}")"
#SCRIPT_DIR="$(dirname "$SCRIPT")"

#### Options

function usage {
#Usage: $SCRIPT_NAME [-h|--help] [-n|--dry-run] [-v|--verbose] [-a value|--argument value] [file...]
#        -a value|--argument value: pass value to the argument option
    cat <<END >&2
Usage: $SCRIPT_NAME [-h|--help] [-n|--dry-run] [-v|--verbose] [file...]
        -h|--help: get help
        -n|--dry-run: simulate write actions as much as possible
        -v|--verbose: turn on verbose mode
END
    exit 1
}

# Defaults
opt_dry_run=
opt_verbose=
#opt_argument=default

#opts=$($GETOPT --options hnva: --long help,dry-run,verbose,argument: --name "$SCRIPT_NAME" -- "$@") || usage
opts=$($GETOPT --options hnv --long help,dry-run,verbose --name "$SCRIPT_NAME" -- "$@") || usage
eval set -- "$opts"

while true; do
    case "$1" in
        -h | --help) usage ;;
        -n | --dry-run) opt_dry_run=opt_dry_run; shift ;;
        -v | --verbose) opt_verbose=opt_verbose; shift ;;
        #-a | --argument) opt_argument="$2"; shift 2 ;;
        --) shift; break ;;
        *) echo "$SCRIPT_NAME: Internal error: '$1'" >&2; exit 1 ;;
    esac
done

#### Terminal colors

#declare bold='' underline='' standout='' normal='' black='' red='' green='' yellow='' blue='' magenta='' cyan='' white=''
#if [ -t 1 ]; then # if terminal
#    ncolors="$(which tput > /dev/null && tput colors)" # supports color
#    if test -n "$ncolors" && test "$ncolors" -ge 8; then
#        # shellcheck disable=SC2034
#        termcols=$(tput cols) bold="$(tput bold)" underline="$(tput smul)" standout="$(tput smso)" normal="$(tput sgr0)" black="$(tput setaf 0)" red="$(tput setaf 1)" green="$(tput setaf 2)" yellow="$(tput setaf 3)" blue="$(tput setaf 4)" magenta="$(tput setaf 5)" cyan="$(tput setaf 6)" white="$(tput setaf 7)"
#    fi
#fi

#### Utils

# shellcheck disable=SC2120,SC2317
function indent_stdout {
    local prefix=
    [[ $# -gt 0 &&${1:-} == -p ]] && { prefix="$2"; shift 2; }
    perl -pe "s/^/${prefix}‚ñë‚ñë‚ñë‚ñë/"
}
# shellcheck disable=SC2120,SC2317
function indent_stderr {
    local prefix=
    [[ ${1:-} == -p ]] && { prefix="$2"; shift 2; }
    perl -ne "s/^/${prefix}‚ñë‚ñë‚ñë‚ñë/; print STDERR"
}

# shellcheck disable=SC2059,SC2317
function printf_log {
    [ $# -eq 0 ] && set -- "\n"
    printf -- "$@"
    [[ -z ${LOG_FILE-} ]] || printf -- "$@" >> "$LOG_FILE"
}
# shellcheck disable=SC2059,SC2317
function printf_err_log {
    [ $# -eq 0 ] && set -- "\n"
    printf -- "$@" >&2
    if [[ -n ${ERR_LOG_FILE-} ]]; then
        printf -- "$@" >> "$ERR_LOG_FILE"
    else
        [[ -z ${LOG_FILE-} ]] || printf -- "$@" >> "$LOG_FILE"
    fi
}

# shellcheck disable=SC2059,SC2317
function run_cmd {
    [[ -z ${opt_verbose-} ]] || printf_log "#‚ùØ%s\n" "$(printf " %q" "$@")" || true
    [[ -n ${opt_dry_run-} ]] || "$@"
}

# shellcheck disable=SC2317
function warn { printf_err_log "$SCRIPT_NAME: WARNING: $*\n"; }
# shellcheck disable=SC2317
function err { printf_err_log "$SCRIPT_NAME: ERROR: $*\n"; }
# shellcheck disable=SC2317
function abort { printf_err_log "$SCRIPT_NAME: FATAL: $*\n"; exit 1; }


##############################################################################
#### Config


##############################################################################
#### Main

#cd "$SCRIPT_DIR/.."
#eval "$(direnv export bash 2>/dev/null)"

export PIP_REQUIRE_VIRTUALENV=

for i in /opt/local/bin/python3*; do
    i="${i#*/python}"
    [[ "$i" == *-* ]] && continue
    [[ "$i" =~ ^3.[0-9][0-9]?$ ]] || continue
    PYTHON="/opt/local/bin/python$i"

    echo
    echo "êÑ´ Python $i"

    if ! "$PYTHON" -m pip --version &> /dev/null; then
        echo "êÑ¨ ‚ö†Ô∏è for Python $i, can't find pip"
        continue
    fi

    #  grep -vf =(port installed | awk -F ' ' 'NR>1{print $1}')
    $PYTHON -m pip list --format=columns | \
    awk -F ' +' 'NR>2 {print $1}' | \
        while read -r dist_package; do
            echo
            echo "êÑ¨ Distribution Package: $dist_package"

            # Find the top_level.txt file
            dist_toplevel="$($PYTHON -c "
from importlib.metadata import files
for p in files('$dist_package'):
    if str(p).endswith('top_level.txt'):
        print(p.locate())")"
            if [[ -z "$dist_toplevel" ]]; then
                echo "êÑ≠ ‚ö†Ô∏è for $dist_package, can't find top_level.txt "
                continue
            elif [[ ! -e "$dist_toplevel" ]]; then
                echo "êÑ≠ ‚ö†Ô∏è for $dist_package, $dist_toplevel doesn't exist"
                continue
            fi

            # Read the first line of top_level.txt (We only need to do one import package)
            head -1 "$dist_toplevel" | \
                while read -r import_package; do
                    if [[ -z "$import_package" ]]; then
                        echo "êÑ≠ ‚ö† for $dist_package, first line of top_level.txt is empty. Here's the rest:"
                        cat "$dist_toplevel"
                        continue
                    fi

                    # Find the file location of the origin
                    echo "êÑ≠ Import Package: $import_package"
                    if ! import_file="$($PYTHON -c "import importlib.util; print(importlib.util.find_spec('$import_package').origin)" 2>/dev/null)"; then
                        echo "êÑÆ ‚ö†Ô∏è can't find Import Package $import_package"
                        continue
                    fi

                    if [[ ! -e "$import_file" ]]; then
                        echo "êÑÆ ‚ö† for Import Package $import_package, can't find $import_file"
                        continue
                    fi

                    # Check if an installed MacPorts package provides that
                    port_package="$(port provides "$import_file")"
                    echo "xxxx port_package = $port_package"
                    if grep -qF 'is not provided by' <<<"$port_package"; then
                        echo "‚ùå can't find Port Package for $import_package"
                    else
                        echo "‚úÖ found Port Package: $(sed -n 's/.*: *\(.*\)/\1/p' <<<"$port_package")"

                    fi
                done
        done
done

##############################################################################
# end of script-wide block
exit
}
