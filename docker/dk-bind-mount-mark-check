#!/usr/bin/env bash
# shellcheck shell=bash
# Check every bind-mounted directory for proper mount into containers.

# Check for bash 4 for `readarray` or associative arrays
[ "${BASH_VERSINFO:-0}" -ge 4 ] || { echo "${BASH_SOURCE[0]}: ERROR: bash v4+ required." >&2; exit 1; }

#### Preamble (v2025-02-09)

set -euo pipefail
shopt -s failglob
# shellcheck disable=SC2317
function trap_err { echo "$(basename "${BASH_SOURCE[0]}"): ERR signal on line $(caller)" >&2; }
trap trap_err ERR
trap exit INT  # So that ^C will stop the entire script, not just the current subprocess
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# shellcheck disable=SC2034
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
script="${BASH_SOURCE[0]}"
while [[ -L "$script" ]]; do
    script="$(readlink "$script")"
done
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$script")"

##############################################################################
#### Main

containers=()
if [[ $# -gt 0 ]]; then
    containers=("$@")
else
    readarray -t containers < <(docker ps -aq)
fi

function check_container_running {
    if [[ -z "$(docker ps -q --filter "name=$1" --filter "status=running")" ]]; then
        echo "  ❗️ $container_name: Container is not running"
        return 1
    fi
}

# Helper to run a command and capture stdout/stderr to variables, cleaning up temp files.
# Usage: capture_cmd_output <cmd...>
# Sets: CAPTURED_STDOUT, CAPTURED_STDERR
function capture_cmd_output {
    local temp_stdout temp_stderr
    temp_stdout=$(mktemp)
    temp_stderr=$(mktemp)
    local exit_code=0
    #echo "#❯ $* > $temp_stdout 2> $temp_stderr" >&2
    "$@" > "$temp_stdout" 2> "$temp_stderr" || exit_code="$?"
    CAPTURED_STDOUT=$(cat "$temp_stdout")
    CAPTURED_STDERR=$(cat "$temp_stderr")
    rm "$temp_stdout" "$temp_stderr"
    return "$exit_code"
}

function container_cat {
    local container="$1" file="$2"
    shift
    local exit_code=0
    #echo capture_cmd_output docker exec "$container" cat "$file" >&2
    capture_cmd_output docker exec "$container" cat "$file" || exit_code="$?"
    if [[ -n "$CAPTURED_STDOUT" && "$CAPTURED_STDOUT" == *'runtime exec failed'* ]]; then
        echo "  2️⃣ Container $container has no basic utilities; falling back to 'alpine nsenter'…" >&2
        # This container doesn't even have `test` or `cat` tools
        # so try again with a helper container
        pid=$(docker inspect --format '{{.State.Pid}}' "$container")
        docker run --rm --privileged --pid=host alpine nsenter cat "/proc/$pid/root$file"
    elif [[ -n "$CAPTURED_STDERR" ]]; then
        echo "  ❌️ Error executing command in container $container:" >&2
        echo "$CAPTURED_STDERR" >&2
    else
        echo "$CAPTURED_STDOUT"
    fi
    return "$exit_code"
}

for container in "${containers[@]}"; do
    docker inspect -f '{{.Name}}|{{range .Mounts}}{{if eq .Type "bind"}}{{.Source}}={{.Destination}} {{end}}{{end}}' "$container" 2>/dev/null
done | while IFS='|' read -r container_name rest; do
    if [[ -n "$rest" ]]; then
        container_name="${container_name#/}"
        # Convert space-separated mounts to array
        read -ra mounts <<< "$rest"
        for mount in "${mounts[@]}"; do
            [[ -n "$mount" ]] || continue
            IFS='=' read -r src dst <<< "$mount"
            [[ $src =~ ^(/opt)?/srv/ ]] || continue
            if [[ -d "$src" || -f "$src" ]]; then
                check_container_running "$container_name" || continue
                # Special case for dockervolumebackup which doesn't accept dotfiles at root:
                #   the sentinel file is nested in a same-named directory
                #   https://github.com/offen/docker-volume-backup/issues/607
                if [[ -d "$src/.srv-bind-mount" ]]; then
                    src="$src/.srv-bind-mount/.srv-bind-mount"
                    dst="$dst/.srv-bind-mount/.srv-bind-mount"
                elif [[ -d "$src" ]]; then
                    src="$src/.srv-bind-mount"
                    dst="$dst/.srv-bind-mount"
                fi
                #echo "src=$src"
                #echo "dst=$dst"
                if cmp "$src" <(container_cat "$container_name" "$dst"); then
                    echo "  ✅ Bind mount looks successful: ${container_name}:$dst"
                else
                    echo "  ❌️ Bind mount looks wrong: ${container_name}:$dst"
                fi
            elif [[ -e "$src" ]]; then
                echo "  ⚠️ Skipping non-directory: ${container_name}:${dst}…"
            else
                echo "  ❗️ $container_name: Local directory not found: ${src}…"
            fi
        done
    fi
done
