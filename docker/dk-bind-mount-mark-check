#!/usr/bin/env bash
# shellcheck shell=bash
# Check the bind mounts for the specified containers (default: all)
# This is mainly needed with Docker Desktop for Windows which uses WSL and where bind mounts are
# unreliable. Might be needed for macOS too since there's also a level of indirection from the real
# OS in the form of a tiny VM.
# dk-bind-mount-mark must be called first.

# Check for bash 4 for `readarray` or associative arrays
[ "${BASH_VERSINFO:-0}" -ge 4 ] || { echo "${BASH_SOURCE[0]}: ERROR: bash v4+ required." >&2; exit 1; }

#### Preamble (v2025-02-09)

set -euo pipefail
shopt -s failglob
# shellcheck disable=SC2317
function trap_err { echo "$(basename "${BASH_SOURCE[0]}"): ERR signal on line $(caller)" >&2; }
trap trap_err ERR
trap exit INT  # So that ^C will stop the entire script, not just the current subprocess
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# shellcheck disable=SC2034
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
script="${BASH_SOURCE[0]}"
while [[ -L "$script" ]]; do
    script="$(readlink "$script")"
done
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$script")"

##############################################################################
#### Config

# SRV_ROOT is the base directory for all the Docker Compose projects.
SRV_ROOT=/srv
# On macOS, we don't have access to / but we have access to /opt
[[ -d /opt/srv ]] && SRV_ROOT=/opt/srv

#### Main

containers=()
if [[ $# -gt 0 ]]; then
    containers=("$@")
else
    readarray -t containers < <(docker ps -aq)
fi

function check_container_running {
    if [[ -z "$(docker ps -q --filter "name=$1" --filter "status=running")" ]]; then
        echo "  ‚ùóÔ∏è $container_name: Container is not running"
        return 1
    fi
}

# Helper to run a command and capture stdout/stderr to variables, cleaning up temp files.
# Usage: capture_cmd_output <cmd...>
# Sets: CAPTURED_STDOUT, CAPTURED_STDERR
function capture_cmd_output {
    local temp_stdout temp_stderr
    temp_stdout=$(mktemp)
    temp_stderr=$(mktemp)
    local exit_code=0
    #echo "#‚ùØ $* > $temp_stdout 2> $temp_stderr" >&2
    "$@" > "$temp_stdout" 2> "$temp_stderr" || exit_code="$?"
    CAPTURED_STDOUT=$(cat "$temp_stdout")
    CAPTURED_STDERR=$(cat "$temp_stderr")
    rm "$temp_stdout" "$temp_stderr"
    return "$exit_code"
}

function container_cat {
    local container="$1" file="$2"
    shift
    local exit_code=0
    #echo capture_cmd_output docker exec "$container" /bin/cat "$file" >&2
    capture_cmd_output docker exec "$container" /bin/cat "$file" || exit_code="$?"
    if [[ -n "$CAPTURED_STDOUT" && "$CAPTURED_STDOUT" == *'runtime exec failed'* ]]; then
        echo "  üîô Container $container has no basic utilities; falling back to 'alpine nsenter'‚Ä¶" >&2
        # This container doesn't even have `test` or `cat` tools
        # so try again with a helper container
        pid=$(docker inspect --format '{{.State.Pid}}' "$container")
        docker run --rm --privileged --pid=host alpine nsenter cat "/proc/$pid/root$file"
    elif [[ -n "$CAPTURED_STDERR" ]]; then
        echo "‚ùó ${container}: can't find sentinel:" >&2
        echo "$CAPTURED_STDERR" >&2
    else
        echo "$CAPTURED_STDOUT"
    fi
    return "$exit_code"
}

for container in "${containers[@]}"; do
    readarray -t lines < <(docker inspect -f '{{.Name}}|{{range .Mounts}}{{if eq .Type "bind"}}{{.Source}}={{.Destination}} {{end}}{{end}}' "$container")
    for line in "${lines[@]}"; do
        IFS='|' read -r container_name rest <<< "$line"
        if [[ -n "$rest" ]]; then
            container_name="${container_name#/}"
            # Convert space-separated mounts to array
            read -ra mounts <<< "$rest"
            for mount in "${mounts[@]}"; do
                [[ -n "$mount" ]] || continue
                IFS='=' read -r src dst <<< "$mount"
                [[ $src =~ ^"$SRV_ROOT"/ ]] || continue

                if [[ -d "$src" || -f "$src" ]]; then
                    check_container_running "$container_name" || continue

                    if [[ -d "$src" ]]; then
                        # Some containers (e.g. postgresql) restrict the directories and since we don't
                        # want this script to run with sudo, we go to the fallback directory
                        if [[ ! -r "$src/.srv-bind-mount" ]]; then
                            proj_dir="${src#"$SRV_ROOT"/}"
                            sub_path="${proj_dir#*/}"
                            proj_dir="$SRV_ROOT/${proj_dir%%/*}"
                            if [[ ! -d "$proj_dir" ]]; then
                                echo "‚ùóÔ∏è Project directory not found: ${proj_dir}‚Ä¶"
                                continue
                            fi
                            fallback_root="$proj_dir/.srv-bind-mount.d"
                            src="$fallback_root/$sub_path"
                        fi

                        # Special case for apps that don't like dotfiles at root, in which case
                        #   our sentinel file is nested in a same-named directory.
                        #   - DVB doesn't ignore dotfiles https://github.com/offen/docker-volume-backup/issues/607
                        if [[ -d "$src/.srv-bind-mount" ]]; then
                            src="$src/.srv-bind-mount/.srv-bind-mount"
                            dst="$dst/.srv-bind-mount/.srv-bind-mount"
                        elif [[ -d "$src" ]]; then
                            src="$src/.srv-bind-mount"
                            dst="$dst/.srv-bind-mount"
                        fi
                        #echo "src=$src"
                        #echo "dst=$dst"
                    fi

                    # Special case:
                    if [[ "$(head -n 1 "$src")" == "skip because empty" ]]; then
                        echo "üôà ${container_name}: Bind mount may be OK (we couldn't mark it because it was empty): $dst"
                    elif cmp "$src" <(container_cat "$container_name" "$dst") &>/dev/null; then
                        echo "‚úÖ ${container_name}: Bind mount OK: $dst"
                    else
                        echo "‚ùåÔ∏è ${container_name}: Bind mount BAD: $dst"
                    fi
                elif [[ -e "$src" ]]; then
                    echo "  ‚ö†Ô∏è ${container_name}: Skipping non-directory: ${dst}‚Ä¶"
                else
                    echo "  ‚ùóÔ∏è ${container_name}: Local directory not found: ${src}‚Ä¶"
                fi
            done
        fi
    done
done
