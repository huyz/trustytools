#!/usr/bin/env bash
# shellcheck shell=bash
# Check every bind-mounted directory for proper mount into containers.

# Check for bash 4 for `readarray` or associative arrays
[ "${BASH_VERSINFO:-0}" -ge 4 ] || { echo "${BASH_SOURCE[0]}: ERROR: bash v4+ required." >&2; exit 1; }

#### Preamble (v2025-02-09)

set -euo pipefail
shopt -s failglob
# shellcheck disable=SC2317
function trap_err { echo "$(basename "${BASH_SOURCE[0]}"): ERR signal on line $(caller)" >&2; }
trap trap_err ERR
trap exit INT  # So that ^C will stop the entire script, not just the current subprocess
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# shellcheck disable=SC2034
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
script="${BASH_SOURCE[0]}"
while [[ -L "$script" ]]; do
    script="$(readlink "$script")"
done
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$script")"

##############################################################################
#### Main

containers=()
if [[ $# -gt 0 ]]; then
    containers=("$@")
else
    readarray -t containers < <(docker ps -aq)
fi

for container in "${containers[@]}"; do
    docker inspect -f '{{.Name}}|{{range .Mounts}}{{if eq .Type "bind"}}{{.Source}}={{.Destination}} {{end}}{{end}}' "$container" 2>/dev/null
done | while IFS='|' read -r container_name rest; do
    if [[ -n "$rest" ]]; then
        container_name="${container_name#/}"
        # Convert space-separated mounts to array
        read -ra mounts <<< "$rest"
        for mount in "${mounts[@]}"; do
            [[ -n "$mount" ]] || continue
            IFS='=' read -r src dst <<< "$mount"
            [[ $src =~ ^(/opt)?/srv/ ]] || continue
            if [[ -d "$src" ]]; then
                if "$(dirname "$0")/dk-shell" "$container_name" test -f "$dst/.srv-bind-mount"; then
                    echo "  ✅ Bind mount looks successful: ${container_name}:$dst/.srv-bind-mount"
                else
                    echo "  ❌️ Bind mount looks wrong: ${container_name}:$dst/.srv-bind-mount"
                fi
            elif [[ -e "$src" ]]; then
                echo "  ⚠️ Skipping non-directory: ${container_name}:${dst}…"
            else
                echo "  ❗️ $container_name: Local directory not found: ${src}…"
            fi
        done
    fi
done
