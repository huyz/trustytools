#!/bin/bash
# shellcheck shell=bash
# Start an interactive shell in specified container (or run a command with arguments).
# If no container is specified, prompt with menu.
# WARNING: some quoting may not work:
#   ❯ dk-shell crowdsec echo "'yes'" '"no"'
#   'yes' no

#### Preamble (v2025-02-09)

set -euo pipefail
shopt -s failglob
# shellcheck disable=SC2317
function trap_err { echo "$(basename "${BASH_SOURCE[0]}"): ERR signal on line $(caller)" >&2; }
trap trap_err ERR
trap exit INT  # So that ^C will stop the entire script, not just the current subprocess
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# shellcheck disable=SC2034
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
script="${BASH_SOURCE[0]}"
while [[ -L "$script" ]]; do
    script="$(readlink "$script")"
done
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$script")"

##############################################################################
#### Main

container="${1:-}"
if [[ -z "$container" ]]; then
    container=$(docker container ls --format '{{.Names}}' | fzf --tac)
    if [[ -z "$container" ]]; then
        echo "ERROR: No container selected." >&2
        exit 1
    fi
fi

it=""
cmd="s=/bin/sh; if [ -x /bin/zsh ]; then s=/bin/zsh; elif [ -x /bin/bash ]; then s=/bin/bash; fi; exec \$s"

if [[ $# -le 1 ]]; then
    it="-it"
else
    # Build the command string for arguments
    args=""
    for arg in "${@:2}"; do
        args="$args $(printf "%q" "$arg")"
    done
    cmd="$cmd -c \"$args\""
fi

exec docker exec $it "$container" /bin/sh -c "$cmd"
