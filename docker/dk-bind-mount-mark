#!/usr/bin/env bash
# shellcheck shell=bash
# Mark all the bind mounts so that we know they hold our real data. This is mainly
# needed with Docker Desktop for Windows which uses WSL and where bind mounts are unreliable.
# Might be needed for macOS too since there's also a level of indirection from the real OS
# in the form of a tiny VM.
# This is used in conjunction with dk-bind-mount-mark-check to see if everything is properly mounted.

# Check for bash 4 for `readarray` or associative arrays
[ "${BASH_VERSINFO:-0}" -ge 4 ] || { echo "${BASH_SOURCE[0]}: ERROR: bash v4+ required." >&2; exit 1; }

#### Preamble (v2025-02-09)

set -euo pipefail
shopt -s failglob
# shellcheck disable=SC2329
function trap_err { echo "$(basename "${BASH_SOURCE[0]}"): ERR signal on line $(caller)" >&2; }
trap trap_err ERR
trap exit INT  # So that ^C will stop the entire script, not just the current subprocess
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

_install_cmd='brew install'
if [[ $OSTYPE == darwin* ]]; then
    if [[ "${EUID:-$UID}" -eq 0 ]]; then
        _install_cmd='sudo port install'
        MAC_PREFIX=/opt/local
        [[ -x "${GETOPT:="$MAC_PREFIX/bin/getopt"}" ]] || \
            { echo "$0: ERROR: \`$_install_cmd util-linux\` to install $GETOPT." >&2; exit 1; }
#        [[ -x "${SED:="$MAC_PREFIX/bin/gsed"}" ]] || \
#            { echo "$0: ERROR: \`$_install_cmd gsed\` to install $SED." >&2; exit 1; }
    else
        HOMEBREW_PREFIX="$( (/opt/homebrew/bin/brew --prefix || /usr/local/bin/brew --prefix || brew --prefix) 2>/dev/null)"
        MAC_PREFIX="$HOMEBREW_PREFIX"
        [[ -x "${GETOPT:="$MAC_PREFIX/opt/gnu-getopt/bin/getopt"}" ]] || \
            { echo "$0: ERROR: \`$_install_cmd gnu-getopt\` to install $GETOPT." >&2; exit 1; }
#        [[ -x "${SED:="$MAC_PREFIX/bin/gsed"}" ]] || \
#            { echo "$0: ERROR: \`$_install_cmd gnu-sed\` to install $SED." >&2; exit 1; }
    fi
    [[ -x "${REALPATH:="$MAC_PREFIX/bin/grealpath"}" ]] || \
        { echo "$0: ERROR: \`$_install_cmd coreutils\` to install $REALPATH." >&2; exit 1; }
    CHOWN="gchown" # also coreutils
    CHMOD="gchmod" # also coreutils
else
    _install_cmd='sudo apt install'
    HOMEBREW_PREFIX="$( (/home/linuxbrew/.linuxbrew/bin/brew --prefix || brew --prefix) 2>/dev/null)"
    GETOPT="getopt"
    REALPATH="realpath"
    CHOWN="chown"
    CHMOD="chmod"
fi

# shellcheck disable=SC2034
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
# a) Uncomment to expand symlinks in order to find the proper .envrc for direnv
#SCRIPT="$($REALPATH "${BASH_SOURCE[0]}")"
# b) Uncomment in the general case
SCRIPT="$($REALPATH --no-symlinks "${BASH_SOURCE[0]}")"
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$SCRIPT")"

##############################################################################
#### Config

# SRV_ROOT is the base directory for all the Docker Compose projects.
SRV_ROOT=/srv
# On macOS, we don't have access to / but we have access to /opt
[[ -d /opt/srv ]] && SRV_ROOT=/opt/srv

#### Main

containers=()
if [[ $# -gt 0 ]]; then
    containers=("$@")
else
    readarray -t containers < <(docker ps -aq)
fi

for container in "${containers[@]}"; do
    docker inspect -f '{{range .Mounts}}{{if eq .Type "bind"}}{{printf "%s\n" .Source}}{{end}}{{end}}' "$container" 2>/dev/null
done | sort -u | while read -r src; do
    [[ $src =~ ^"$SRV_ROOT"/ ]] || continue

    if [[ -d "$src" ]]; then
        proj_dir="${src#"$SRV_ROOT"/}"
        sub_path="${proj_dir#*/}"
        proj_dir="$SRV_ROOT/${proj_dir%%/*}"
        if [[ ! -d "$proj_dir" ]]; then
            echo "‚ùóÔ∏è Project directory not found: ${proj_dir}‚Ä¶"
            continue
        fi
        fallback_root="$proj_dir/.srv-bind-mount.d"
        fallback_src="$fallback_root/$sub_path"

        # Make a fallback copy so that dk-bind-mount-mark-check can work without sudo
        # for directories that containers (e.g. postgresql) restrict.
        sudo mkdir -p "$fallback_src"
        sudo "$CHOWN" -R --reference="$proj_dir" "$fallback_root"
        sudo "$CHMOD" -R 755 "$fallback_root"

        # Special treatment if the directory is empty; we don't want to be the first to write into it
        # (PostgreSQL will only initialize the data directory if it is empty)
        if [[ -z "$(sudo find "$src" -mindepth 1 -maxdepth 1 -print -quit)" ]]; then
            echo "üìù Noting empty bind mount: ${fallback_src}/${dst_path}‚Ä¶"
            (echo "skip because empty"; date -Iseconds) > "$fallback_src/$dst_path"
        else
            # Special case for projects that can't handle dotfiles
            #   - DVB doesn't ignore dotfiles https://github.com/offen/docker-volume-backup/issues/607
            if [[ "$src" == */docker*volume*backup/conf* ]]; then
                for i in "$src/.srv-bind-mount" "$fallback_src/.srv-bind-mount"; do
                    # Delete remnants of a previous attempt at only using a file with no indirection
                    if [[ -e "$i" && ! -d "$i" ]]; then
                        sudo rm -f "$i" 2>/dev/null || true
                    fi
                    sudo mkdir -p "$i"
                    sudo "$CHOWN" --reference="$(dirname "$i")" "$i"
                    sudo "$CHMOD" 755 "$i"
                done
                # NOTE: don't be confused; this references a file while the above references a subdir of a subdir
                dst_path=".srv-bind-mount/.srv-bind-mount"
            else
                dst_path=".srv-bind-mount"
            fi

            echo "‚úÖ Marking bind mount: ${src}/${dst_path}‚Ä¶"
            date -Iseconds | sudo sh -c "cat > '${src}/${dst_path}'"
            sudo cp -a "$src/$dst_path" "$fallback_src/$dst_path"
            # Change ownership and permissions to match the parent directory $src
            # or some containers will try to change ownership/perms of this file
            # and would fail to start up.
            for i in "$src/$dst_path" "$fallback_src/$dst_path"; do
                sudo "$CHOWN" --reference="$(dirname "$i")" "$i"
                sudo "$CHMOD" 644 "$i"
            done
        fi

    elif [[ -f "$src" ]]; then
        echo "‚úÖ No need to mark ordinary file: ${src}‚Ä¶"
    elif [[ -e "$src" ]]; then
        echo "‚ö†Ô∏è Skipping special file: ${src}‚Ä¶"
    else
        echo "‚ùóÔ∏è Directory not found: ${src}‚Ä¶"
    fi
done
