#!/usr/bin/env bash
# shellcheck shell=bash
# List some process info, including PID and UID, of specified Docker container(s) (Default: all)

# Check for bash 4 for `readarray` or associative arrays
[ "${BASH_VERSINFO:-0}" -ge 4 ] || { echo "${BASH_SOURCE[0]}: ERROR: bash v4+ required." >&2; exit 1; }

#### Preamble (v2025-02-09)

set -euo pipefail
shopt -s failglob
# shellcheck disable=SC2329
function trap_err { echo "$(basename "${BASH_SOURCE[0]}"): ERR signal on line $(caller)" >&2; }
trap trap_err ERR
trap exit INT  # So that ^C will stop the entire script, not just the current subprocess
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# shellcheck disable=SC2034
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
script="${BASH_SOURCE[0]}"
while [[ -L "$script" ]]; do
    script="$(readlink "$script")"
done
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$script")"

##############################################################################
#### Init

DK_SYSTEM_SHELL=dk-system-shell

# Create temporary associative array file since bash 3.x doesn't support associative arrays
temp_file=$(mktemp)
trap 'rm -f "$temp_file"' EXIT

#### Main

# Get process info from dk-lsns
"$DK_SYSTEM_SHELL" /usr/bin/lsns --type pid --noheadings --notruncate --output PID,PPID,USER,UID,NPROCS,COMMAND | while read -r line; do
    if [[ -n "$line" ]]; then
        # Extract PID (first field after removing leading whitespace)
        pid=$(echo "$line" | sed 's/^[[:space:]]*//' | cut -d' ' -f1)
        echo "$pid|$line" >> "$temp_file"
    fi
done

containers=()
if [[ $# -gt 0 ]]; then
    containers=("$@")
else
    readarray -t containers < <(docker ps -aq)
fi

# Process each container
for container in "${containers[@]}"; do
    name_and_pid=$(docker inspect -f "{{.Name}} {{.State.Pid}}" "$container" 2>/dev/null)
    if [[ -n "$name_and_pid" ]]; then
        read -r name pid <<< "$name_and_pid"
        # Look up process info from temp file
        pinfo=$(grep "^$pid|" "$temp_file" | cut -d'|' -f2- || true)
        if [[ -n "$pinfo" ]]; then
            echo "$name $pinfo"
        else
            echo "$name $pid"
        fi
    fi
done \
| sort -u \
| column-port -t --table-columns '[CONTAINER],[PID],[PPID],[USER],[UID],[NPROCS],[COMMAND]' --table-columns-limit 7 --table-wrap '[COMMAND]'
